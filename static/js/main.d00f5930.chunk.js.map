{"version":3,"sources":["components/ListItem/ListItem.module.css","components/Header/Header.module.css","components/AddItem/AddItem.module.css","components/Header/Header.jsx","components/ListItem/ListItem.jsx","components/Main/Main.jsx","components/AddItem/AddItem.jsx","App.js","redux/state.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","classes","header","state","todoList","item","length","buttons","onClick","changeFilter","filter","activeFilter","ListItem","isImportant","important","name","value","makeImportant","id","done","isDone","buttonForDone","makeDone","buttonForRemove","buttonForRemoveHide","removeBusiness","layout","layoutHide","Main","postElement","map","p","key","description","main","AddItem","showModule","show","current","desc","React","createRef","content","addButton","hide","ref","rows","type","addBusiness","App","store","getState","this","_callSubscriber","console","log","splice","_updateId","i","newPost","push","subscribe","observer","window","Boolean","location","hostname","match","rerenderEntireTree","ReactDOM","render","bind","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d00f5930.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ListItem_item__19n3F\",\"important\":\"ListItem_important__3KrhQ\",\"done\":\"ListItem_done__4FEMt\",\"layout\":\"ListItem_layout__2ovTc\",\"layoutHide\":\"ListItem_layoutHide__lECi3\",\"buttonForDone\":\"ListItem_buttonForDone__1Dq3D\",\"buttonForRemove\":\"ListItem_buttonForRemove__3Gfox\",\"buttonForRemoveHide\":\"ListItem_buttonForRemoveHide__Gh6NJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__8OcE9\",\"buttons\":\"Header_buttons__3wthh\",\"activeFilter\":\"Header_activeFilter__3Z4Kd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"AddItem_content__21QN_\",\"show\":\"AddItem_show__xEXVT\",\"hide\":\"AddItem_hide__2LAIc\",\"desc\":\"AddItem_desc__SAZib\"};","import React from \"react\";\r\nimport classes from \"./Header.module.css\"\r\n\r\nconst Header = (props) =>{\r\n    let allBusiness = () =>{\r\n        props.changeFilter('all')\r\n    }\r\n    let activeBusiness = () =>{\r\n        props.changeFilter('active')\r\n    }\r\n    let doneBusiness = () =>{\r\n        props.changeFilter('done')\r\n    }\r\n    return(\r\n        <div className={classes.header}>\r\n            <h1>TODO List</h1>\r\n            <div>\r\n                <span>Осталось выполнить: <b>{props.state.todoList.item.length}</b></span>\r\n                <div className={classes.buttons}>\r\n                    <button onClick={allBusiness} className={props.state.filter === 'all' ? classes.activeFilter : ''}>Все</button>\r\n                    <button onClick={activeBusiness} className={props.state.filter === 'active' ? classes.activeFilter : ''}>Активные</button>\r\n                    <button onClick={doneBusiness} className={props.state.filter === 'done' ? classes.activeFilter : ''}>Выполненые</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport classes from './ListItem.module.css'\r\n\r\n\r\nconst ListItem = (props) =>{\r\n    let isImportant = () =>{\r\n        props.makeImportant(props.id);\r\n    }\r\n    let isDone = () =>{\r\n        props.makeDone(props.id);\r\n    }\r\n    let removeBusiness = () =>{\r\n        props.removeBusiness(props.id);\r\n    }\r\n    return(\r\n        <div className={`${classes.item} ${props.isImportant ? classes.important : ' '}`}>\r\n            <h3>{props.name}</h3>\r\n            <p>{props.value}</p>\r\n            <button className={classes.important} onClick={isImportant}>IMPORTANT</button>\r\n            <button className={`${classes.done} ${props.isDone ? classes.buttonForDone : ' '}`} onClick={isDone}>DONE</button>\r\n            <button className={`${props.isDone ? classes.buttonForRemove : classes.buttonForRemoveHide}`} onClick={removeBusiness}>REMOVE</button>\r\n            <div className={`${props.isDone ? classes.layout : classes.layoutHide}`}>\r\n                <h3>DONE</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React from \"react\";\r\nimport classes from './Main.module.css'\r\nimport ListItem from \"../ListItem/ListItem\";\r\n\r\nconst Main = (props) =>{\r\n    let postElement;\r\n    if(props.state.filter === 'done'){\r\n        postElement = props.state.todoList.item.map(p => p.isDone === true ? <ListItem key={p.id} value={p.description} name={p.name} isImportant={p.isImportant} isDone={p.isDone} id={p.id} makeImportant={props.makeImportant} makeDone={props.makeDone} removeBusiness={props.removeBusiness}/> : false);\r\n    }else if(props.state.filter ==='all'){\r\n        postElement = props.state.todoList.item.map(p => <ListItem key={p.id} value={p.description} name={p.name} isImportant={p.isImportant} id={p.id} isDone={p.isDone} makeImportant={props.makeImportant} makeDone={props.makeDone} removeBusiness={props.removeBusiness}/>);\r\n    }else{\r\n        postElement = props.state.todoList.item.map(p => p.isDone === false ? <ListItem key={p.id} value={p.description} name={p.name} isImportant={p.isImportant} isDone={p.isDone} id={p.id} makeImportant={props.makeImportant} makeDone={props.makeDone} removeBusiness={props.removeBusiness}/> : false);\r\n    }\r\n    return(\r\n        <div className={classes.main}>\r\n            {postElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from \"react\";\r\nimport classes from './AddItem.module.css'\r\n\r\nconst AddItem = (props) =>{\r\n    let showModule = () =>{\r\n        props.showModule();\r\n    }\r\n    let addBusiness = () => {\r\n        props.addBusiness(name.current.value,desc.current.value,show());\r\n        showModule();\r\n    }\r\n    let show = () =>{\r\n        isImportant.current.value = isImportant.current.value === 'on' ? 'off':'on';\r\n        return isImportant.current.value === 'on' ? true : false\r\n    }\r\n    let desc =React.createRef();\r\n    let name = React.createRef();\r\n    let isImportant = React.createRef();\r\n    return(\r\n        <div className={classes.content}>\r\n            <button onClick={showModule}>Add the business</button>\r\n            <div className={props.state.addButton? classes.show : classes.hide}>\r\n                <ul>\r\n                    <li><span>Name:</span><textarea ref={name} rows='1'></textarea></li>\r\n                    <li><span className={classes.desc}>Description:</span><textarea rows='5' ref={desc}></textarea></li>\r\n                    <li><span>Important: </span> <input type=\"checkbox\"  ref={isImportant} onClick={show} /></li>\r\n                    <li><button onClick={addBusiness}>Add</button></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport  default AddItem;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Main from \"./components/Main/Main\";\nimport AddItem  from './components/AddItem/AddItem';\n\nconst App =(props)=>{\n  return (\n    <div className={props.state.addButton? \"grey App\" : \"notgrey\"+\" App\"}>\n      <Header state={props.state} changeFilter={props.changeFilter}/>\n      <Main state={props.state} makeImportant={props.makeImportant} makeDone={props.makeDone} removeBusiness={props.removeBusiness}/>\n\n      <AddItem state={props.state} showModule={props.showModule} addBusiness={props.addBusiness}/>\n    </div>\n  );\n}\n\nexport default App;\n","let store = {\r\n    state:{\r\n        addButton: false,\r\n        filter: 'active',\r\n        todoList:{\r\n            item:[\r\n                {\r\n                    id:0,\r\n                    name:'React',\r\n                    description:'Learn react a little bit.',\r\n                    isImportant:false,\r\n                    isDone:false\r\n                },\r\n                {\r\n                    id:1,\r\n                    name:'Coffee',\r\n                    description:'Make some coffee.',\r\n                    isImportant: false,\r\n                    isDone:false\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    getState(){\r\n        return this.state;\r\n    },\r\n    _callSubscriber(){\r\n        console.log(\"State changed\")\r\n    },\r\n\r\n    removeBusiness(id){\r\n        this.state.todoList.item.splice(id,1);\r\n        this._updateId();\r\n        this._callSubscriber(this.state);\r\n\r\n    },\r\n    changeFilter(filter){\r\n        this.state.filter = filter;\r\n        this._callSubscriber(this.state);\r\n    },\r\n    showModule(){\r\n        if(this.state.addButton === false){\r\n            this.state.addButton = true;\r\n        }else{\r\n            this.state.addButton = false;\r\n        };\r\n        this._callSubscriber(this.state);\r\n    },\r\n    makeImportant(id){\r\n        this.state.todoList.item[id].isImportant = this.state.todoList.item[id].isImportant ? false : true;\r\n        this._callSubscriber(this.state);\r\n    },\r\n    _updateId(){\r\n        for(let i = 0; i<this.state.todoList.item.length; i++){\r\n            this.state.todoList.item[i].id = i;\r\n        }\r\n    },\r\n    makeDone(id){\r\n        this.state.todoList.item[id].isDone = this.state.todoList.item[id].isDone ? false : true;\r\n        this._callSubscriber(this.state);\r\n    },\r\n    addBusiness(name,desc,isImportant){\r\n        console.log(isImportant)\r\n      let newPost = {\r\n          id:this.state.todoList.item.length,\r\n          name: name,\r\n          description:desc,\r\n          isImportant:isImportant,\r\n          isDone:false\r\n      };\r\n      this.state.todoList.item.push(newPost);\r\n      this._callSubscriber(this.state);\r\n    },\r\n    subscribe(observer){\r\n        this._callSubscriber = observer;\r\n    }\r\n}\r\nwindow.state = store.state;\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/state\";\nimport * as serviceWorker from './serviceWorker';\n\nlet rerenderEntireTree = (state) => {\n    ReactDOM.render(<App state={state} showModule={store.showModule.bind(store)} addBusiness={store.addBusiness.bind(store)} makeImportant={store.makeImportant.bind(store)} makeDone={store.makeDone.bind(store)} removeBusiness={store.removeBusiness.bind(store)} changeFilter={store.changeFilter.bind(store)}/>, document.getElementById('root'));\n}\nrerenderEntireTree(store.getState());\nstore.subscribe(rerenderEntireTree);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}